Problem Description:
  The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this 
pattern in a fixed font for better legibility)
  P   A   H   N
  A P L S I I G
  Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"
Write the code that will take a string and make this conversion given a number of rows:

string convert(string text, int nRows);
convert("PAYPALISHIRING", 3) should return "PAHNAPLSIIGYIR".



My thought:
  find the mathematic relationship of the original position between every ajacent characters in the zigzag rows.
  should concern about the special cases: numRows = 1;


My solution:
class Solution {
    public String convert(String s, int numRows) {
        int len = s.length();
        if(len == 0)
            return "";
        if(numRows == 1)
            return s;
        char[] ret = new char[len];
        int curP = 0;
        int sum = 2*(numRows -1);
        for(int j = 0; j < numRows; j++) {
            int i = j;
            int delta = 2*(numRows-1-j);
            if(j == numRows - 1)
                delta =sum;
            while(i < len){
                //if (curP == len)
                    //return new String(ret);
                ret[curP++] = s.charAt(i);
                i += delta;
                if(delta != sum)
                    delta = sum -delta;             
            }
        }
        return new String(ret);
    }
}


The best Performance solution:
    class Solution {
    public String convert(String s, int numRows) {
        if(numRows == 1) {
            return s;
        }
        char[] arr = s.toCharArray();
        int range = (numRows << 1) - 2;
        char[] result = new char[arr.length];
        int index = 0;
        for(int i = 0; i < arr.length; i += range) {
            result[index++] = arr[i];
        }
        for(int i = 1; i < numRows - 1; i++) {
            int right = i << 1;
            int left = range - right;
            boolean isLeft = true;
            for(int j = i; j < arr.length;) {
                result[index++] = arr[j];
                if(isLeft) {
                    j = j + left;
                    isLeft = false;
                } else {
                    j = j + right;
                    isLeft = true;
                }
            }
        }
        for(int i = numRows - 1; i < arr.length; i += range) {
            result[index++] = arr[i];
        }
        return new String(result);
    }
}
  


Compare & Analysis:
  My sholution: O(n) I think, cause I only visit every char in string for once.
  
