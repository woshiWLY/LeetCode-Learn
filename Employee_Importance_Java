Problem Description:



thought: using DFS and recursion


My solution:
/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    public int getImportance(List<Employee> employees, int id) {
        int sum = 0;
        for(Employee e: employees) {
            if(e.id == id) {
                sum += e.importance;
                List<Integer> sub = e.subordinates;
                for(int i = 0; i < sub.size(); i++) {
                    sum += getImportance(employees, sub.get(i));
                }
            }
        }
        return sum;
        
    }
}



Better Performance Solution:
/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    public int getImportance(List<Employee> employees, int id) {
        Map<Integer, Employee> map = new HashMap<>();
        for (Employee employee : employees)
            map.put(employee.id, employee);
        return dfs(map, id);
    }
    
    public int dfs(Map<Integer, Employee> map, int id) {
        Employee root = map.get(id);
        int total = root.importance;
        for (int sub : root.subordinates)
            total += dfs(map, sub);
        return total;
    }
}

Compare & Analysis:
  Using hashMap can help us save the time to find corresponding employees
