Problem Description:
TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it 
returns a short URL such as http://tinyurl.com/4e9iAk.

Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm 
should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original 
URL.

My thought: I have no idea :)


Solution:
public class Codec {
    List<String> urls = new ArrayList<String>();
    // Encodes a URL to a shortened URL.
    //Map<String,String> map = new HashMap<>();
    public String encode(String longUrl) {
        urls.add(longUrl);
        //String encodeV = String.valueOf(urls.size()-1);
        return String.valueOf(urls.size()-1);
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        int index = Integer.valueOf(shortUrl);
        return (index<urls.size())?urls.get(index):"";
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.decode(codec.encode(url));



Analysis:
  The easist way to encode and decode is doing nothing to the url :)
  However, that can not be called encode.
  We will firstly thought that how to match to tiny URL to URL. This method gives the way to match them according to the 
  current size. Also we can use Hash Map store the tuple of tiny URL and URL. 
