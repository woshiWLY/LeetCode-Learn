Problem Description:
	Given a string, find the length of the longest substring without repeating characters.

	Examples:

	Given "abcabcbb", the answer is "abc", which the length is 3.

	Given "bbbbb", the answer is "b", with the length of 1.

	Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence 
	and not a substring.



My thought:
	If the string is empty string, return 0;
	If the string is not empty. Using start and end to indentify the substring, and check the character next to then end. 
If there is a character which is duplicated to the char we check. set the start to the character next to the repeat charater in
substring. and Update end.



My Solution:
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0)
            return 0;
        int maxLen = -1;
        int start = 0; 
        int end = 0;
        int curLen = 1;
        for(int i = end + 1; i < s.length(); i++) {
            int checkResult = checkRepeat(s, start, end, s.charAt(i));
            if(checkResult != -1) {
                start = checkResult + 1;
            }   
            end++;
            curLen = end - start +1;
            if(curLen > maxLen)
                maxLen = curLen;
        }
        if(maxLen == -1)
            maxLen = curLen;
        return maxLen;
    }
    
    private int checkRepeat(String s, int start, int end, char c) {
        for(int i = start; i <= end; i++) {
            if(s.charAt(i) == c)
                return i;
        }
        return -1;
    }
}



Best Performance Solution:
ample 35 ms submission
class Solution {
    public int lengthOfLongestSubstring(String s) {
         int[] idx = new int[128];
        for(int i = 0; i < idx.length; i++) idx[i] = -1;
        
        int ans = 0, start = 0;
        for(int i = 0; i < s.length(); i++){
            int cIdx = s.charAt(i);
            if(idx[cIdx]>=start)  start = idx[cIdx]+1;               
            idx[cIdx] = i;
            ans = Math.max(ans, i-start+1);
        }
        return ans;
    }
}


Compare & Analysis:
	The advanced my solution: using hash set to check repeat character can decrease the check to O(1);
	using Hash set as sliding window is an abstract concept commonly in array/strings problem.A window is a range of elements 
	
	in the array/string which usually defined by the start and end indices, i.e. [i,j) (left-closed, right-open).
	
	A sliding window is a window "slides" its two boundaries to the certain direction. For example, if we slide [i, j)[i,j) to 
	the right by 11 element, then it becomes )[i+1,j+1) (left-closed, right-open).
	
	Instead of using a set to tell if a character exists or not, we could define a mapping of the characters to its index. 
	Then we can skip the characters immediately when we found a repeated character.
	
	The reason is that if s[j]s[j] have a duplicate in the range [i,j) with index j', we don't need to increase i 
	little by little. We can skip all the elements in the range [i, j'] and let i to be j' + 1 directly.
	
	if we know that the charset is rather small, we can replace the Map with an integer array as direct access table.
	Commonly used tables are:

	int[26] for Letters 'a' - 'z' or 'A' - 'Z'
	int[128] for ASCII
	int[256] for Extended ASCII
	Time Complexity: O(n)
	
