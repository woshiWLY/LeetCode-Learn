Problem Description:



My thought:
  Because it ask us to construct a tree, I decided to use recursion method.
  Using help method to return the index of local maximum. 


My solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return constructNode(nums, 0, nums.length-1);
    }
    private TreeNode constructNode(int[] nums, int start, int end){
        if(start == end){
            return new TreeNode(nums[start]);
        } else if(start < end){
            int index = FindMax(nums, start, end);
            TreeNode ret = new TreeNode(nums[index]);
            ret.left = constructNode(nums, start, index-1);
            ret.right = constructNode(nums, index+1, end);
            return ret;
        } else if(start > end){
            return null;
        }
        
        return null;
    }
    
    private int FindMax(int[] nums, int start, int end) {
        //return the index of max integer
        int max = start;
        for(int i = start; i <= end; i++){
            if (nums[i] > nums[max]){
                max = i;
            }
        }
        return max;       
    } 
}


Best Performance Solution:
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        if (nums == null || nums.length == 0) return null;
        return helper(nums, 0, nums.length - 1);
    }

    public TreeNode helper(int[] nums, int start, int end) {
        if (start > end) return null;
        if (start == end) return new TreeNode(nums[start]);

        int maxVal = nums[start];
        int maxIdx = start;
        for (int i = start; i <= end; i++) {
            if (nums[i] > maxVal) {
                maxIdx = i;
                maxVal = nums[i];
            }
        }
        TreeNode root = new TreeNode(maxVal);
        root.left = helper(nums, start, maxIdx - 1);
        root.right = helper(nums, maxIdx + 1, end);

        return root;
    }
}

Compare & Analysis:
  Both use recursion.
  I don't know why it is fast than me.
  :(
