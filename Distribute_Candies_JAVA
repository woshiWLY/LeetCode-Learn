Problem Description:
Given an integer array with even length, where different numbers in this array represent different kinds of candies. 
Each number means one candy of the corresponding kind. You need to distribute these candies equally in number to brother and 
sister. Return the maximum number of kinds of candies the sister could gain.

Example 1:
Input: candies = [1,1,2,2,3,3]
Output: 3
Explanation:
There are three different kinds of candies (1, 2 and 3), and two candies for each kind.
Optimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too. 
The sister has three different kinds of candies. 


Example 2:
Input: candies = [1,1,2,3]
Output: 2
Explanation: For example, the sister has candies [2,3] and the brother has candies [1,1]. 
The sister has two different kinds of candies, the brother has only one kind of candies. 

Note:

The length of the given array is in range [2, 10,000], and will be even.
The number in given array is in range [-100,000, 100,000].




My Thought: 
    Because the input is even and we are required to distribute evenly, so what we should do is to find the available different
    kinds of candies in the size of n/2.
            




My Solution:
class Solution {
    public int distributeCandies(int[] candies) {
        int numsCandies = candies.length/2;
        Map<Integer, Integer> SCandies = new HashMap<>();
        for(int i = 0; i < candies.length; i++) {
            if(!SCandies.containsKey(candies[i])) {
                SCandies.put(candies[i],1);
            }
            if(SCandies.size() == numsCandies)
                break;
        }
        return SCandies.size();
    }
}


The Best Perfromance Solution:
class Solution {
    public int distributeCandies(int[] candies) {
        HashSet sis = new HashSet();
        boolean[] map = new boolean[200001];
        int res = 0;
        for(int i = 0; i<candies.length;i++){
            if(!map[candies[i]+100000]){
                map[candies[i]+100000] = true;
                
                res++;
                if(res == candies.length/2) return res;
            }
        }
        
        return res;
        
    }
}



Compare & Analysis:
  Both of us have used hash to decrease the time to find different candies. However, the best performance used the more 
  appropriate form---Hash Set
  HashSet can only store the elements which are unique in the set.
  Although it seems like it doesn't use the hashset _(:зゝ∠)_
