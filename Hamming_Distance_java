Problem Discription:
	The Hamming distance between two integers is the number of positions at which the corresponding bits are different.
	Given two integers x and y, calculate the Hamming distance.
	Note:
		0 ≤ x, y < 2^31.
		Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
			 ↑   ↑


Thoughts: Because Hamming Distance is about the binary represents, it is better for us to use bit operations.

My solution:
    class Solution {
    public int hammingDistance(int x, int y) {
        int exlusive = x ^ y;
        int count = 0;
        for(int i = 0; i < 32; i++) {
            if((exlusive & 1) == 1)
                count++;
            exlusive = exlusive >> 1;
        }
        return count;
    }
}

